generator client {
    provider = "prisma-client-js"
}

datasource db {
<<<<<<< HEAD
    provider = "postgresql"
    url      = env("DIRECT_URL")
=======
  provider = "postgresql"
  url      = env("DATABASE_URL")
>>>>>>> d1ca616 (fix: update database URL and enhance pet persona structure)
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id               String             @id @default(cuid())
    name             String?
    email            String             @unique
    emailVerified    DateTime?
    image            String?
    createdAt        DateTime           @default(now())
    level            Int                @default(1)
    streakCount      Int                @default(0)
    timezone         String             @default("Asia/Singapore")
    totalPoints      Int                @default(0)
    updatedAt        DateTime           @updatedAt
    accounts         Account[]
    checkins         DailyCheckin[]
    journalEntries   JournalEntry[]
    sessions         Session[]
    activities       UserActivity[]
    UserCheckIn      UserCheckIn[]
    UserNotification UserNotification[]
    pets             UserPet[]
}

model UserCheckIn {
    id        String   @id @default(cuid())
    createdAt DateTime
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PetType {
    id            String    @id @default(cuid())
    name          String    @unique
    description   String
    rarity        PetRarity @default(COMMON)
    spriteUrl     String?
    happyFrames   Json?
    sadFrames     Json?
    neutralFrames Json?
    excitedFrames Json?
    createdAt     DateTime  @default(now())
    userPets      UserPet[]
}

model UserPet {
    id                String           @id @default(cuid())
    userId            String
    petTypeId         String
    name              String?
    isInFarm          Boolean          @default(false)
    isActive          Boolean          @default(true)
    feedingStreak     Int              @default(0)
    careStreak        Int              @default(0)
    totalInteractions Int              @default(0)
    adoptedAt         DateTime         @default(now())
    joinedFarmAt      DateTime?
    currentMood       UserMood         @default(NEUTRAL)
    hasLeft           Boolean          @default(false)
    fetchedAt         DateTime         @default(now())
    familiarity       Float            @default(10.0)
    moodLogs          PetMoodLog[]
    petType           PetType          @relation(fields: [petTypeId], references: [id])
    user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    personas          UserPetPersona[]

    @@index([userId, isActive])
}

model PetMoodLog {
    id        String   @id @default(cuid())
    petId     String
    happiness Float
    trigger   String?
    createdAt DateTime @default(now())
    status    String?
    mood      UserMood
    dialogue  String?
    pet       UserPet  @relation(fields: [petId], references: [id], onDelete: Cascade)

    @@index([petId, createdAt])
}

model UserPetPersona {
    id          String   @id @default(cuid())
    petId       String
    personaJson Json
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    pet         UserPet  @relation(fields: [petId], references: [id], onDelete: Cascade)

    @@index([petId, createdAt])
}

model DailyCheckin {
    id           String         @id @default(cuid())
    userId       String
    mealType     MealType
    rating       Int
    notes        String?
    createdAt    DateTime       @default(now())
    date         DateTime
    user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    JournalEntry JournalEntry[]

    @@unique([userId, date, mealType])
    @@index([userId, date])
}

model JournalEntry {
    id        String        @id @default(cuid())
    userId    String
    title     String?
    content   String
    sentiment Float?
    mood      UserMood?
    tags      String[]
    checkinId String?
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
    checkin   DailyCheckin? @relation(fields: [checkinId], references: [id])
    user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId, createdAt])
}

model Activity {
    id             String         @id @default(cuid())
    name           String         @unique
    description    String
    type           ActivityType
    duration       Int
    pointsReward   Int            @default(10)
    moodBoost      Float          @default(5.0)
    instructions   Json
    createdAt      DateTime       @default(now())
    userActivities UserActivity[]
}

model UserActivity {
    id          String    @id @default(cuid())
    userId      String
    activityId  String
    completed   Boolean   @default(false)
    rating      Int?
    notes       String?
    duration    Int?
    completedAt DateTime?
    createdAt   DateTime  @default(now())
    activity    Activity  @relation(fields: [activityId], references: [id])
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId, completed])
}

model Notification {
    id               String             @id @default(cuid())
    userId           String
    type             NotificationType
    title            String
    message          String
    data             Json?
    read             Boolean            @default(false)
    createdAt        DateTime           @default(now())
    UserNotification UserNotification[]

    @@index([userId, read, createdAt])
}

model UserNotification {
    id             String       @id @default(cuid())
    userId         String
    notificationId String
    isRead         Boolean      @default(false)
    readAt         DateTime?
    createdAt      DateTime     @default(now())
    notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, notificationId])
    @@index([userId, isRead, createdAt])
}

enum PetRarity {
    COMMON
    UNCOMMON
    RARE
    LEGENDARY
}

enum MealType {
    BREAKFAST
    LUNCH
    DINNER
}

enum UserMood {
    ANXIOUS
    STRESSED
    NEUTRAL
    CONTENT
    HAPPY
    EXCITED
    GRATEFUL
    CALM
    ENERGETIC
    TIRED
}

enum ActivityType {
    MEDITATION
    BREATHING
    JOURNALING
    EXERCISE
    MINDFULNESS
    GRATITUDE
    CHECKIN
}

enum NotificationType {
    FEEDING_REMINDER
    CHECKIN_REMINDER
    ACTIVITY_SUGGESTION
    PET_MOOD_ALERT
    ACHIEVEMENT
    STREAK_MILESTONE
}
