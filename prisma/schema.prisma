generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DIRECT_URL")
}

// Authentication models (for NextAuth.js)
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Core app models
model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    // App-specific fields
    timezone    String @default("Asia/Singapore")
    streakCount Int    @default(0)
    totalPoints Int    @default(0)
    level       Int    @default(1)

    // Relations
    accounts         Account[]
    sessions         Session[]
    pets             UserPet[]
    checkins         DailyCheckin[]
    journalEntries   JournalEntry[]
    activities       UserActivity[]
    UserNotification UserNotification[]
}

// Pet system
model PetType {
    id          String    @id @default(cuid())
    name        String    @unique
    description String
    rarity      PetRarity @default(COMMON)
    spriteUrl   String

    // Animation frames for different moods (stored as JSON)
    happyFrames   Json
    sadFrames     Json
    neutralFrames Json
    excitedFrames Json

    createdAt DateTime  @default(now())
    userPets  UserPet[]
}

enum PetRarity {
    COMMON
    UNCOMMON
    RARE
    LEGENDARY
}

model UserPet {
    id        String @id @default(cuid())
    userId    String
    petTypeId String

    name            String?
    currentStatus   String?
    statusUpdatedAt DateTime?
    happiness       Float     @default(10.0) // 0-100
    currentMood     PetMood   @default(NEUTRAL)
    isInFarm        Boolean   @default(false)
    isActive        Boolean   @default(true)

    // Pet stats
    feedingStreak     Int @default(0)
    careStreak        Int @default(0)
    totalInteractions Int @default(0)

    adoptedAt    DateTime  @default(now())
    joinedFarmAt DateTime?

    // Relations
    user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    petType  PetType          @relation(fields: [petTypeId], references: [id])
    moodLogs PetMoodLog[]
    personas UserPetPersona[]

    @@index([userId, isActive])
}

enum PetMood {
    VERY_SAD
    SAD
    NEUTRAL
    HAPPY
    VERY_HAPPY
    EXCITED
}

model PetMoodLog {
    id        String   @id @default(cuid())
    petId     String
    mood      PetMood
    happiness Float
    trigger   String? // What caused the mood change
    createdAt DateTime @default(now())

    pet UserPet @relation(fields: [petId], references: [id], onDelete: Cascade)

    @@index([petId, createdAt])
}

// AI-driven personality tracking
model UserPetPersona {
    id    String @id @default(cuid())
    petId String

    // Personality traits (0-10 scale)
    //   cheerful   Float @default(5.0)
    //   calm       Float @default(5.0)
    //   playful    Float @default(5.0)
    //   empathetic Float @default(5.0)
    //   shy        Float @default(5.0)
    //   quirky     Float @default(5.0)
    personaJson Json // Full personality profile as JSON

    // Context for the personality change
    //   trigger    String? // What caused this personality update
    //   confidence Float   @default(1.0) // AI confidence in this assessment

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    pet UserPet @relation(fields: [petId], references: [id], onDelete: Cascade)

    @@index([petId, createdAt])
}

// Daily check-ins for meals
model DailyCheckin {
    id     String @id @default(cuid())
    userId String

    mealType MealType
    rating   Int // 1-5 star rating for the meal
    notes    String? // Optional notes about the meal

    createdAt DateTime @default(now())
    date      DateTime // Date component for tracking daily patterns

    user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    JournalEntry JournalEntry[]

    @@unique([userId, date, mealType])
    @@index([userId, date])
}

enum MealType {
    BREAKFAST
    LUNCH
    DINNER
}

// Journaling system
model JournalEntry {
    id     String @id @default(cuid())
    userId String

    title     String?
    content   String    @db.Text
    sentiment Float? // -1 to 1 from sentiment analysis
    mood      UserMood?
    tags      String[] // Array of mood/topic tags

    // Meal check-ins will appear as journal entries
    checkinId String? // Links to a meal check-in if this entry is auto-generated

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    checkin DailyCheckin? @relation(fields: [checkinId], references: [id])

    @@index([userId, createdAt])
}

enum UserMood {
    ANXIOUS
    STRESSED
    NEUTRAL
    CONTENT
    HAPPY
    EXCITED
    GRATEFUL
    CALM
    ENERGETIC
    TIRED
}

// Activity system for mental health exercises
model Activity {
    id           String       @id @default(cuid())
    name         String       @unique
    description  String
    type         ActivityType
    duration     Int // in minutes
    pointsReward Int          @default(10)
    moodBoost    Float        @default(5.0)

    instructions Json // Step-by-step guide
    createdAt    DateTime @default(now())

    userActivities UserActivity[]
}

enum ActivityType {
    MEDITATION
    BREATHING
    JOURNALING
    EXERCISE
    MINDFULNESS
    GRATITUDE
}

model UserActivity {
    id         String @id @default(cuid())
    userId     String
    activityId String

    completed Boolean @default(false)
    rating    Int? // 1-5 stars
    notes     String?
    duration  Int? // Actual duration if different from suggested

    completedAt DateTime?
    createdAt   DateTime  @default(now())

    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    activity Activity @relation(fields: [activityId], references: [id])

    @@index([userId, completed])
}

// Notification system
model Notification {
    id     String @id @default(cuid())
    userId String

    type    NotificationType
    title   String
    message String
    data    Json? // Additional data for the notification

    read             Boolean            @default(false)
    createdAt        DateTime           @default(now())
    UserNotification UserNotification[]

    @@index([userId, read, createdAt])
}

model UserNotification {
    id             String @id @default(cuid())
    userId         String
    notificationId String

    isRead    Boolean   @default(false)
    readAt    DateTime?
    createdAt DateTime  @default(now())

    user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

    @@unique([userId, notificationId])
    @@index([userId, isRead, createdAt])
}

enum NotificationType {
    FEEDING_REMINDER
    CHECKIN_REMINDER
    ACTIVITY_SUGGESTION
    PET_MOOD_ALERT
    ACHIEVEMENT
    STREAK_MILESTONE
}
